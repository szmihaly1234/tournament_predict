import streamlit as st
import tensorflow as tf
import pandas as pd
import numpy as np
import pickle
from sklearn.preprocessing import StandardScaler

# ğŸ“Œ Modell betÃ¶ltÃ©se
@st.cache_resource
def load_model():
    return tf.keras.models.load_model("football_match_model.h5")

model = load_model()

with open("feature_columns.pkl", "rb") as f:
    feature_columns = pickle.load(f)

# ğŸ“Œ Scaler betÃ¶ltÃ©se
scaler = StandardScaler()
scaler.mean_ = np.load("scaler_mean.npy", allow_pickle=True)
scaler.scale_ = np.load("scaler_scale.npy", allow_pickle=True)

# ğŸ“Œ FelhasznÃ¡lÃ³i bemenet pÃ©ldÃ¡ja (weboldalrÃ³l)
input_data = pd.DataFrame({'year': [2024], 'month': [6], 'day_of_week': [3], 
                           'home_team': ['Brazil'], 'away_team': ['Argentina'], 'result': ['home_win']})

# ğŸ“Œ One-hot encoding a kategorikus vÃ¡ltozÃ³knak
input_data = pd.get_dummies(input_data)

# ğŸ“Œ HiÃ¡nyzÃ³ oszlopok kitÃ¶ltÃ©se a tanÃ­tÃ¡si adatszerkezet alapjÃ¡n
for col in feature_columns:
    if col not in input_data.columns:
        input_data[col] = 0  # HiÃ¡nyzÃ³ oszlopok pÃ³tlÃ¡sa nullÃ¡val

# ğŸ“Œ Feature-k rendezÃ©se az eredeti sorrend szerint
input_data = input_data[feature_columns]

# ğŸ“Œ Input alak ellenÅ‘rzÃ©se
print("Input shape (ellenÅ‘rzÃ©s):", input_data.shape)  # Ennek (1,565)-nek kell lennie!

# ğŸ“Œ SkÃ¡lÃ¡zÃ¡s (az eredeti scaler-rel)
input_scaled = scaler.transform(input_data)
print("Scaled input shape:", input_scaled.shape)  # Ennek is (1,565)-nek kell lennie!

